<?php
// $Id: autocomplete_dropdown.module,v 1.1.2.9 2009/12/30 17:46:19 markuspetrux Exp modified by peijun zhang$

/**
 * @file
 * Provides autocomplete widgets for CCK Text and Number fields.
 */

/**
 * Implementation of hook_menu().
 */
function autocomplete_dropdown_menu() {
  $items = array();
  $items['autocomplete_dropdown'] = array(
    'title' => 'Autocomplete Widgets',
    'page callback' => 'autocomplete_dropdown_json',
    'access callback' => 'autocomplete_dropdown_access',
    'access arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function autocomplete_dropdown_theme() {
  return array(
    'autocomplete_dropdown' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Because we need to alter the field settings form, this module needs
 * to be loaded after CCK Text/Number field modules.
 * See autocomplete_dropdown_install().
 */
function autocomplete_dropdown_form_alter(&$form, $form_state, $form_id) {
  // Provide additional help for the field settings form.
  if ($form_id == 'content_field_edit_form' && isset($form['widget'])) {
    module_load_include('inc', 'autocomplete_dropdown', 'autocomplete_dropdown.admin');
    _autocomplete_dropdown_content_field_edit_form_alter($form, $form_state);
  }
}

/**
 * Implementation of hook_widget_info().
 */
function autocomplete_dropdown_widget_info() {
  return array(
    'autocomplete_dropdown_allowvals' => array(
      'label' => t('Autocomplete dropdown for allowed values list'), 'field types' => array('text', 'number_integer', 'number_decimal', 'number_float'),
    ),
    'autocomplete_dropdown_flddata' => array(
      'label' => t('Autocomplete dropdown for existing field data'), 'field types' => array('text'),
    ),
  );
}

/**
 * Implementation of hook_elements().
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function autocomplete_dropdown_elements() {
  return array(
    'autocomplete_dropdown' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
	//'#columns' => array('key'), '#delta' => 0,
      '#process' => array('autocomplete_dropdown_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function autocomplete_dropdown_widget_settings($op, $widget) {
  module_load_include('inc', 'autocomplete_dropdown', 'autocomplete_dropdown.admin');
  return _autocomplete_dropdown_widget_settings($op, $widget);
}

/**
 * Implementation of hook_widget().
 */
function autocomplete_dropdown_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array(
    '#type' => 'autocomplete_dropdown',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
}

/**
 * Process an individual textfield autocomplete element.
 */
function autocomplete_dropdown_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];

  $value = NULL;
  if ($field['widget']['type'] == 'autocomplete_dropdown_allowvals') {
    if (isset($element['#value'][$field_key])) {
      $keys = array($element['#value'][$field_key]);
      module_load_include('inc', 'autocomplete_dropdown', 'autocomplete_dropdown.common');
      $options = _autocomplete_dropdown_get_options($field, '', '', $keys, 1);
      if (!empty($options)) {
        //$value = current($options);
	$value = key($options);
      }
    }
  }
  else if ($field['widget']['type'] == 'autocomplete_dropdown_flddata') {
    if (isset($element['#value'][$field_key])) {
      $value = $element['#value'][$field_key];
    }
  }
	$select_options = optionwidgets_options($field, true);
	$select_options = array_merge(array('' => '- None -'), $select_options);

  $element[$field_key] = array(
    '#type' => 'select',
    '#default_value' => $value,
    '#autocomplete_path' => 'autocomplete_dropdown/'. $element['#type_name'] .'/'. $element['#field_name'],
    //'#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'text'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
	//'#columns' => array(0=>"key"),
   	'#options' => $select_options,

  );
	//nhpid_api_dump($element);
  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'autocomplete_dropdown_validate');

  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
	//'#value' => implode('][', array_merge($element['#parents'], $field_key)),
  );
	//form_error('value', implode('][', array_merge($element['#parents'], array($field_key))));
	//nhpid_api_dump($element);	
  return $element;
}

/**
 * Validate a textfield autocomplete element.
 */
function autocomplete_dropdown_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $type_name = $element['#type_name'];
  $delta = $element['#delta'];
  $field = content_fields($field_name, $type_name);
  //drupal_set_message(nhpid_api_dump($field, 'red', true));
  $field_key = $element['#columns'][0];
  $value = trim($element['#value']);

  if ($field['widget']['type'] == 'autocomplete_dropdown_allowvals') {
    if ($value !== '') {
      module_load_include('inc', 'autocomplete_dropdown', 'autocomplete_dropdown.common');
      $options = _autocomplete_dropdown_get_options($field, $value, 'equals', NULL, 1);
      if (empty($options)) {
        form_error($element, t('%name: found no valid option.', array('%name' => $field['widget']['label'])));
      }
      else {
        $value = key($options);
      }
    }
  }

  // Remove the wrapper layer and set the right element's value.
  // This will move the nested value at 'field-name-0-value-value'
  // back to its original location, 'field-name-0-value'.

  form_set_value($element, $value, $form_state);
//form_error($element,$value);
  
}

/**
 * Check access to the menu callback of the autocomplete widget.
 */
function autocomplete_dropdown_access($type_name, $field_name) {
  return user_access('access content') && ($field = content_fields($field_name, $type_name)) && content_access('view', $field) && content_access('edit', $field);
}

/**
 * Menu callback; Retrieve a pipe delimited string of autocomplete suggestions.
 */
function autocomplete_dropdown_json($type_name, $field_name, $string = '') {
  module_load_include('inc', 'autocomplete_dropdown', 'autocomplete_dropdown.common');
  $field = content_fields($field_name, $type_name);
  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();
  $options = _autocomplete_dropdown_get_options($field, $string, $match, NULL, 10);
  foreach ($options as $key => $value) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$value] = '<div class="reference-autocomplete">'. check_plain($value) .'</div>';
  }
  drupal_json($matches);
}

/**
 * Theme an individual textfield autocomplete element.
 */
function theme_autocomplete_dropdown($element) {
  return $element['#children'];
}


function autocomplete_dropdown_options($field, $flatten = TRUE) {
  $function = $field['module'] .'_allowed_values';
  $options = function_exists($function) ? $function($field) : (array) content_allowed_values($field, $flatten);
  // Add an empty choice for :
  // - non required radios
  // - non required selects
  if (!$field['required']) {
    if ((in_array($field['widget']['type'], array('optionwidgets_buttons', 'nodereference_buttons', 'userreference_buttons')) && !$field['multiple'])
      || (in_array($field['widget']['type'], array('autocomplete_dropdown_allowvals', 'nodereference_select', 'userreference_select')))) {
      $options = array('' => theme('optionwidgets_none', $field)) + $options;
    }
  }
  return $options;
}

function theme_autocomplete_dropdown_none($field) {
  switch ($field['widget']['type']) {
    case 'optionwidgets_buttons':
    case 'nodereference_buttons':
    case 'userreference_buttons':
      return t('N/A');
    case 'autocomplete_dropdown_allowvals':
    case 'nodereference_select':
    case 'userreference_select':
      return t('- None -');
    default :
      return '';
  }
}
